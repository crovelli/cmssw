process HtoWW2e2nu = {
    
    # --- general configuration ---
    include "Configuration/EventContent/data/EventContent.cff"
    include "Configuration/JetMET/data/calorimetry-digitization.cff"
    include "PhysicsTools/HepMCCandAlgos/data/genCandidates.cfi"    
    
    # --- digitization ---
    sequence digitization = { caloDigi }
    
    include "RecoLocalTracker/Configuration/data/RecoLocalTracker.cff"
    include "RecoLocalMuon/Configuration/data/RecoLocalMuon.cff"
    #     include "RecoLocalCalo/Configuration/data/RecoLocalCalo.cff"
    
    # rec Hits reconstruction: ecal localreco is done by HLT
    sequence localreco =  {trackerlocalreco & muonlocalreco }   

    # KF track sequences	
    include "RecoTracker/Configuration/data/RecoTracker.cff"
  
    # --- met sequence --- 
    include "HiggsAnalysis/HiggsToWW2e/data/metProducerSequence.cfi"
    
    # --- jet sequence ---
    include "HiggsAnalysis/HiggsToWW2e/data/jetProducerSequence.cfi"

    # --- electron sequences ---
    #    include "HtoWWElectrons/HtoWWEleProducer/data/eleProducerSequence.cfi"
    include "RecoEcal/EgammaClusterProducers/data/ecalClusteringSequence.cff"
    include "RecoEgamma/EgammaElectronProducers/data/pixelMatchGsfElectronSequence.cff"
    #    include "HtoWWElectrons/HtoWWEleProducer/data/eleMcMatch.cfi"
    
    
    # --- ambiguity solving ---
    module ambSolving = AmbResolver {
	InputTag src = pixelMatchGsfElectrons
	bool filter = true
    }
    
    # --- electron identifying ---
    module eleIdentifying = EleIdentifier {
	#    InputTag src = pixelMatchGsfElectrons
	InputTag src = ambSolving
	InputTag barrelClusterShapeAssociation = hybridSuperClusters:hybridShapeAssoc
	InputTag endcapClusterShapeAssociation = islandBasicClusters:islandEndcapShapeAssoc
	bool filter = true
    }
    
    # --- ESSource for Electron ID likelihood ---
#     include "HtoWWElectrons/HtoWWLHESSource/data/configuration.cfi"

    sequence eleSequence = {
	ecalClusteringSequence ,     
	pixelMatchGsfElectronSequence ,
	ambSolving ,
	eleIdentifying ,
	clonedElectrons
    }

    sequence ourKfSequence = {	
	ckftracks	
    }
    
    # --- ele cloning ------------------------------
    # shallow-clones GSF electrons into "clonedElectrons" 
    #  module clonedElectrons = PixelMatchGsfElectronShallowCloneProducer # qs. x 15X
    #    {
    #      InputTag src = eleIdentifying
    #    }	
    
    module clonedElectrons = HtoWWEleCloner 
    {
	#      InputTag src = pixelMatchGsfElectrons
	InputTag src = ambSolving
	# InputTag src = eleIdentifying
	string HWWgsfEleCandCollection = "HtoWWRecoEleCandidates"
    }	
    
    
    
    # --- tree dumper ---
    include "HiggsAnalysis/HiggsToWW2e/data/treeDumper.cfi"
    replace treeDumper.nameFile = "default.root"
    
    # --- print event number ---
    module counter = AsciiOutputModule {}
    
    
    # --- input source ---
    source = PoolSource {
	untracked int32 maxEvents = 10
	untracked vstring fileNames = {
            "/store/mc/2006/12/21/mc-onsel-120_qqH160_WW/0000/1AF3299E-63A8-DB11-A649-00E08129008B.root"
        }
    }
    
    
    # --- output ------------------------------
    
    
    # define an output file and drop everything that you don't want. 
    # Make sure to KEEP your producer output
    #    module CMSSWoutput = PoolOutputModule 
    #      { 
    #        untracked string fileName = "HWWee_analysisOutput.root" 
    #        untracked vstring outputCommands = {
    #              "drop *",
    #              "keep *_pixelMatchGsfElectrons_*_*",
    #              "keep *_clonedElectrons_*_*",
    #              "keep *_ambSolving_*_*",
    #              "keep *_eleIdentifying_*_*"
    #              }
    #      }
    
    
    
    
    # ----------------------
    # --- analysis paths ---
    # ----------------------
    # basic reco
    path basicRecoPath = {
#	digitization &
	localreco
    }

    # HLT
    include "HiggsAnalysis/HiggsToWW2e/data/triggerPaths.cff"

    # reconstruction of physics objects
    path hlRecoPath = {
	ourKfSequence,
	metSequence,
	jetSequence,
	eleSequence
    }

    # saving infos
    endpath q = { treeDumper, counter }
    # endpath q2 = {CMSSWoutput}
    
    
    # --- message logger ---
    service = MessageLogger {
	untracked vstring destinations = { "cout" }
	untracked vstring categories = { 
	    "HtoWWEleProducer", 
	    "HtoWWMetProducer", 
	    "CmsRecoTreeFiller","HtoWWTreeDumper"
	}
	untracked PSet cout = { 
	    untracked string treshold = "WARNING"
	    untracked PSet default = { untracked int32 limit = 0 } 
	    untracked PSet HtoWWEleProducer  = { untracked int32 limit = 100 }
	    untracked PSet HtoWWMetProducer  = { untracked int32 limit = 100 }
	    untracked PSet CmsRecoTreeFiller = { untracked int32 limit = 100 }
	    untracked PSet HtoWWTreeDumper   = { untracked int32 limit = 100 }
	    untracked PSet ProductNotValid   = { untracked int32 limit = 100 }
	    untracked bool noTimeStamps = true
	    untracked bool noLineBreaks = true
	}
    }

}
